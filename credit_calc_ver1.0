import argparse
from math import log, ceil

parser = argparse.ArgumentParser(description="This program prints recipes \
consisting of the ingredients you provide.")

parser.add_argument("-t", "--type",
                    choices=["diff", "annuity"],
                    help="prints help")

parser.add_argument("--principal", type=int)
parser.add_argument("--interest", type=float)
parser.add_argument("--payment", type=float)

parser.add_argument("--periods", type=int)

# read arguments from command
args = parser.parse_args()


def nominal_interest_rate(loan_interest):
    return loan_interest / (12 * 100)


def number_of_months(p, a, i):
    formula = a / (a - (i * p))
    return log(formula, 1 + i)


def enter_loan_principal():
    print('Enter the loan principal:')
    return int(input())  # P


def enter_monthly_payment():
    print('Enter the monthly payment:')
    return int(input())  # A


def enter_loan_interest():
    print('Enter the loan interest:')
    return float(input())


def enter_number_periods():
    print('Enter the number of periods:')
    return int(input())


def enter_the_annuity_payment():
    print('Enter the annuity payment:')
    return float(input())

# menu for choice "n"
def number_of_monthly_payments():
    p = enter_loan_principal()
    a = enter_monthly_payment()
    loan_interest = enter_loan_interest()

    process_number_of_monthly_payments(p, a, loan_interest)


# calculation for choice "n" or ex 6
def process_number_of_monthly_payments(p, a, loan_interest):
    i = nominal_interest_rate(loan_interest)
    n = ceil(number_of_months(p, a, i))
    if n / 12 > 1:
        if n % 12 == 0:
            print(f'It will take {n // 12} years to repay this loan!')
        else:
            print(f'It will take {n // 12} years and {n % 12} months to repay this loan!')
    else:
        print(f'It will take {n % 12} months to repay this loan!')

    overpayment = round(n * a - p)
    print(f"Overpayment = {overpayment}")


def annuity_monthly_payment_amount():
    if not args.type:
        p = enter_loan_principal()
        n = enter_number_periods()
        loan_interest = enter_loan_interest()

        process_annuity_monthly_payment_amount(p, n, loan_interest)



def process_annuity_monthly_payment_amount(p, n, loan_interest):
    i = nominal_interest_rate(loan_interest)
    # A = annuity payment;
    a = p * ((i * (1 + i)**n) / ((1 + i)**n - 1))
    print(f'Your monthly payment = {ceil(a)}!')
    overpayment = ceil(a) * n - p
    print(f"Overpayment = {overpayment}")



def loan_principal():
    a = enter_the_annuity_payment()
    n = enter_number_periods()
    loan_interest = enter_loan_interest()


def process_loan_principal(a, n, loan_interest):

    i = nominal_interest_rate(loan_interest)

    p = a / ((i * (1 + i) ** n) / ((1 + i) ** n - 1))

    print(f'Your loan principal = {round(p)}!')


def compute_differentiated_payments():
    p = enter_loan_principal()
    n = enter_number_periods()
    loan_interest = enter_loan_interest()

    calculate_differentiated_payments(p, n, loan_interest)


def calculate_differentiated_payments(p, n, loan_interest):
    i = nominal_interest_rate(loan_interest)

    total = 0
    for m in range(1, n + 1):
        d = p / n + i * (p - (p * (m - 1)) / n)
        print(f"Month {m}: payment is {ceil(d)}")
        total += ceil(d)

    print(f"\nOverpayment = {total - p}")


if not args.type:
    print("Incorrect parameters")

    # print('''What do you want to calculate?
    # type "n" for number of monthly payments,
    # type "a" for annuity monthly payment amount,
    # type "p" for loan principal,
    # type "d" to compute differentiated payments :''')
    #
    # user_choice = input()
    # if user_choice == 'n':
    #     number_of_monthly_payments()
    # elif user_choice == 'a':
    #     annuity_monthly_payment_amount()
    # elif user_choice == 'p':
    #     loan_principal()
    # elif user_choice == 'd':
    #     compute_differentiated_payments()

elif args.type == "diff":
    if args.principal and args.periods and args.interest:
        p = args.principal
        n = args.periods
        loan_interest = args.interest
        calculate_differentiated_payments(p, n, loan_interest)
    else:
        print("Incorrect parameters")
elif args.type == "annuity":
    if not args.interest:
        print("Incorrect parameters")
    # ex 2 find payment if we know principal periods and interest (the same choice "a")
    elif not args.payment:
        p = args.principal
        n = args.periods
        loan_interest = args.interest
        process_annuity_monthly_payment_amount(p, n, loan_interest)
    # ex 5 find principal if we know payment periods and interest (the same choice "p")
    elif not args.principal:
        a = args.payment
        n = args.periods
        loan_interest = args.interest
        process_loan_principal(a, n, loan_interest)
    # ex 6 find periods if we know principal payment and interest (the same choice "n")
    elif not args.periods:
        p = args.principal
        a = args.payment
        loan_interest = args.interest
        process_number_of_monthly_payments(p, a, loan_interest)
